name: Core CI Tests

on:
  push:
    branches: [ main, develop, optimize/ci-core-primary ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run CI on (leave empty for current branch)'
        required: false
        default: ''
        type: string

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

jobs:
  backend-build-cache:
    name: Backend Build Cache
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install shared tools
      run: |
        echo "Installing shared tools..."
        echo "Current PATH: $PATH"
        echo "CARGO_HOME: $CARGO_HOME"
        echo "HOME: $HOME"

        # Set up cargo bin directory and PATH
        export CARGO_BIN_DIR="$HOME/.cargo/bin"
        export PATH="$CARGO_BIN_DIR:$PATH"

        # Install diesel_cli
        echo "Installing diesel_cli..."
        cargo install diesel_cli --no-default-features --features postgres --verbose --force

        # Install cargo-audit
        echo "Installing cargo-audit..."
        cargo install cargo-audit --verbose --force

        # Install cargo-deny
        echo "Installing cargo-deny..."
        cargo install cargo-deny --verbose --force

        # Verify installations
        echo "Verifying installations..."
        ls -la "$CARGO_BIN_DIR/"
        diesel --version || echo "diesel not found"
        cargo-audit --version || echo "cargo-audit not found"
        cargo-deny --version || echo "cargo-deny not found"
      working-directory: backend

    - name: Build backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo build --verbose
      working-directory: backend

  backend-smoke-tests:
    name: Backend Smoke Tests (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [backend-build-cache]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Check Rust formatting
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo fmt --all -- --check
      working-directory: backend

    - name: Run Clippy (linting)
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo clippy --all-targets --all-features -- -D warnings -A unused_imports -A dead_code -A clippy::empty_line_after_doc_comments -A clippy::explicit_auto_deref -A clippy::unused_enumerate_index -A clippy::manual_range_contains -A clippy::unnecessary_map_or -A clippy::inherent_to_string -A clippy::too_many_arguments -A clippy::uninlined_format_args -A clippy::needless_borrow -A unused_variables -A clippy::if_same_then_else -A clippy::assertions_on_constants -A clippy::useless_vec -A clippy::overly_complex_bool_expr -A clippy::manual_clamp -A clippy::upper_case_acronyms -A unused_must_use -A unused_mut -A clippy::derivable_impls
      working-directory: backend

    - name: Run fast unit tests (no database)
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=4 --nocapture config auth::services metrics mcp_server::tests::test_mcp_server_creation mcp_server::tests::test_get_data_sources mcp_server::tests::test_get_series_catalog mcp_server::tests::test_create_fallback_visualization mcp_server::tests::test_call_private_chart_api_success mcp_server::tests::test_call_private_chart_api_failure mcp_server::tests::test_get_series_data_for_visualization mcp_server::tests::test_search_economic_series_with_custom_limit mcp_server::tests::test_search_economic_series_missing_query mcp_server::tests::test_get_series_data_missing_series_id mcp_server::tests::test_get_series_data_with_custom_limit mcp_server::tests::test_create_data_visualization_missing_series_ids mcp_server::tests::test_create_data_visualization_with_default_chart_type mcp_server::tests::test_create_data_visualization_with_title mcp_server::tests::test_create_data_visualization_without_title mcp_server::tests::test_create_data_visualization_with_date_filters
      working-directory: backend
      env:
        RUST_LOG: warn

  chart-api-integration-tests:
    name: Chart API Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [backend-smoke-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: chart-api-service/package-lock.json

    - name: Install chart API dependencies
      working-directory: chart-api-service
      run: npm ci

    - name: Build chart API service
      working-directory: chart-api-service
      run: npm run build

    - name: Start chart API service
      working-directory: chart-api-service
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
      env:
        PORT: 3001

    - name: Run chart API tests
      working-directory: chart-api-service
      run: npm test

    - name: Test chart API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:3001/health

        # Test chart generation endpoint
        curl -X POST http://localhost:3001/api/chart \
          -H "Content-Type: application/json" \
          -d '{"chartType": "line", "data": [{"x": "2023-01", "y": 100}], "title": "Test Chart"}' \
          -f || echo "Chart API test completed"

  backend-mcp-integration-tests:
    name: Backend MCP Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [backend-smoke-tests, chart-api-integration-tests]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5445:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5445/econ_graph_test

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: chart-api-service/package-lock.json

    - name: Install chart API dependencies
      working-directory: chart-api-service
      run: npm ci

    - name: Build chart API service
      working-directory: chart-api-service
      run: npm run build

    - name: Start chart API service
      working-directory: chart-api-service
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
      env:
        PORT: 3001

    - name: Start backend service
      working-directory: backend
      run: |
        cargo build --release
        ./target/release/econ-graph-backend &
        sleep 15
        curl -f http://localhost:9877/health || exit 1
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5445/econ_graph_test
        BACKEND_PORT: 9877
        CHART_API_SERVICE_URL: http://localhost:3001/api/chart

    - name: Run MCP server integration tests
      working-directory: backend
      run: cargo test --test mcp_server_integration_tests -- --nocapture
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5445/econ_graph_test
        CHART_API_SERVICE_URL: http://localhost:3001/api/chart

  backend-models-basic-tests:
    name: Backend Models Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [backend-smoke-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Debug cargo bin directory after cache restoration
      run: |
        echo "=== DEBUGGING CARGO BIN DIRECTORY ==="
        echo "HOME: $HOME"
        echo "PATH: $PATH"
        echo "CARGO_HOME: $CARGO_HOME"
        ls -la "$HOME/.cargo/bin/" || echo "cargo bin directory not found"
        which cargo || echo "cargo not in PATH"
        which diesel || echo "diesel not in PATH"
        echo "=== END DEBUGGING ==="

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Run backend models basic tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "=== RUST ENVIRONMENT DEBUGGING ==="
        rustc --version || echo "rustc command failed"
        cargo --version || echo "cargo command failed"
        cc --version || echo "cc command failed"
        echo "=== END RUST ENVIRONMENT DEBUGGING ==="
        cargo test --lib -- --test-threads=2 --nocapture models::data_source::tests::simple_tests models::economic_series::tests::simple_tests models::data_point::tests::simple_tests models::crawl_queue::tests::simple_tests models::search::tests::simple_tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

  backend-models-advanced-tests:
    name: Backend Models Advanced Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [backend-smoke-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5433/econ_graph_test

    - name: Run backend models advanced tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture models::data_source::tests models::economic_series::tests models::data_point::tests models::crawl_queue::tests models::search::tests models::series_metadata::tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5433/econ_graph_test

  backend-crawler-unit-tests:
    name: Backend Crawler Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5434/econ_graph_test

    - name: Run backend crawler unit tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::crawler::tests::test_catalog_downloader_creation services::crawler::tests::test_series_downloader_creation services::crawler::simple_crawler_service::tests services::crawler::enhanced_crawler_scheduler::tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5434/econ_graph_test

  backend-crawler-integration-tests:
    name: Backend Crawler Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5435:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5435/econ_graph_test

    - name: Run backend crawler integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::crawler::tests::test_crawler_with_database services::crawler::tests::test_file_crawling_with_series_downloader services::crawler::tests::test_file_url_crawling services::crawler::tests::test_file_url_error_handling services::crawler::tests::test_file_url_with_special_characters services::crawler::tests::test_multiple_file_urls
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5435/econ_graph_test

  backend-queue-basic-tests:
    name: Backend Queue Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5436:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5436/econ_graph_test

    - name: Run backend queue basic tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::queue_service::tests::test_get_and_lock_next_item services::queue_service::tests::test_queue_item_locking_and_unlocking services::queue_service::tests::test_queue_status_updates services::queue_service::tests::test_queue_retry_logic services::queue_service::tests::test_queue_skip_locked_functionality
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5436/econ_graph_test

  backend-queue-advanced-tests:
    name: Backend Queue Advanced Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5437:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5437/econ_graph_test

    - name: Run backend queue advanced tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::queue_service::tests::test_queue_concurrent_access services::queue_service::tests::test_queue_statistics_with_processing_time services::queue_service::tests::test_queue_statistics_empty services::queue_service::tests::test_queue_error_handling services::queue_service::tests::test_queue_scheduled_items services::queue_service::tests::test_get_stuck_items services::queue_service::tests::test_unlock_stuck_items services::queue_service::tests::test_mark_item_failed services::queue_service::tests::test_cleanup_old_queue_items
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5437/econ_graph_test

  backend-global-analysis-basic-tests:
    name: Backend Global Analysis Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5438:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5438/econ_graph_test

    - name: Run backend global analysis basic tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::global_analysis_service::tests::test_get_countries_with_economic_data services::global_analysis_service::tests::test_get_global_events_with_impacts services::global_analysis_service::tests::test_get_global_events_with_filters services::global_analysis_service::tests::test_direct_event_query services::global_analysis_service::tests::test_event_insertion_only services::global_analysis_service::tests::test_trade_partners_retrieval
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5438/econ_graph_test

  backend-global-analysis-advanced-tests:
    name: Backend Global Analysis Advanced Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5439:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5439/econ_graph_test

    - name: Run backend global analysis advanced tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::global_analysis_service::tests::test_get_correlation_network services::global_analysis_service::tests::test_calculate_country_correlations services::global_analysis_service::tests::test_calculate_economic_health_score services::global_analysis_service::tests::test_correlation_network_centrality_calculation services::global_analysis_service::tests::test_error_handling_database_connection_failure
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5439/econ_graph_test

  backend-series-discovery-basic-tests:
    name: Backend Series Discovery Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5440:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5440/econ_graph_test

    - name: Run backend series discovery basic tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::series_discovery::boc::tests::test_boc_data_source_creation services::series_discovery::boe::tests::test_boe_data_source_creation services::series_discovery::boj::tests::test_boj_data_source_creation services::series_discovery::ecb::tests::test_ecb_data_source_creation services::series_discovery::fhfa::tests::test_fhfa_data_source_creation services::series_discovery::ilo::tests::test_ilo_data_source_creation services::series_discovery::oecd::tests::test_oecd_data_source_creation services::series_discovery::rba::tests::test_rba_data_source_creation services::series_discovery::snb::tests::test_snb_data_source_creation services::series_discovery::unstats::tests::test_unstats_data_source_creation services::series_discovery::wto::tests::test_wto_data_source_creation
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5440/econ_graph_test

  backend-series-discovery-integration-tests:
    name: Backend Series Discovery Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5441:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5441/econ_graph_test

    - name: Run backend series discovery integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::series_discovery::boc::tests::test_discover_series services::series_discovery::boe::tests::test_discover_series services::series_discovery::boj::tests::test_discover_series services::series_discovery::ecb::tests::test_discover_series services::series_discovery::fhfa::tests::test_discover_series services::series_discovery::ilo::tests::test_discover_series services::series_discovery::oecd::tests::test_discover_series services::series_discovery::rba::tests::test_discover_series services::series_discovery::snb::tests::test_discover_series services::series_discovery::unstats::tests::test_discover_series services::series_discovery::wto::tests::test_discover_series
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5441/econ_graph_test

  backend-auth-integration-tests:
    name: Backend Auth Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5442:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5442/econ_graph_test

    - name: Run backend auth integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture auth::integration_tests auth::comprehensive_integration_tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5442/econ_graph_test

  backend-collaboration-integration-tests:
    name: Backend Collaboration Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5443:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5443/econ_graph_test

    - name: Run backend collaboration integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture collaboration_integration_tests services::collaboration_service::tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5443/econ_graph_test

  backend-remaining-service-tests:
    name: Backend Remaining Service Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5444:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5444/econ_graph_test

    - name: Run backend remaining service tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::search_service services::series_service services::comprehensive_series_catalog::tests services::series_discovery::boc::tests::test_discover_boc_series_integration services::series_discovery::boe::tests::test_discover_boe_series_integration services::series_discovery::boe::tests::test_fetch_boe_data services::series_discovery::boj::tests::test_discover_boj_series_integration services::series_discovery::boj::tests::test_fetch_boj_data services::series_discovery::ecb::tests::test_discover_ecb_series_integration services::series_discovery::ecb::tests::test_fetch_ecb_data services::series_discovery::fhfa::tests::test_fhfa_hpi_data_structure services::series_discovery::ilo::tests::test_discover_ilo_series_integration services::series_discovery::oecd::tests::test_discover_oecd_series_integration services::series_discovery::oecd::tests::test_fetch_oecd_data services::series_discovery::rba::tests::test_discover_rba_series_integration services::series_discovery::rba::tests::test_fetch_rba_data services::series_discovery::snb::tests::test_discover_snb_series_integration services::series_discovery::snb::tests::test_fetch_snb_data services::series_discovery::unstats::tests::test_discover_unstats_series_integration services::series_discovery::unstats::tests::test_fetch_unstats_data services::series_discovery::wto::tests::test_discover_wto_series_integration services::series_discovery::wto::tests::test_fetch_wto_data
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5444/econ_graph_test

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run linting
      working-directory: frontend
      run: npm run lint

    - name: Run type checking
      working-directory: frontend
      run: npm run typecheck

    - name: Run tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Run Rust formatting check
      working-directory: backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo fmt -- --check

    - name: Run Rust clippy
      working-directory: backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo clippy -- -W clippy::all

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend formatting check
      working-directory: frontend
      run: npm run prettier-check

    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install cargo-audit
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install cargo-audit --force

    - name: Run Rust security audit
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo audit
      working-directory: backend

    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run npm security audit
      run: npm audit --audit-level moderate
      working-directory: frontend

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install cargo-deny
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install cargo-deny --force

    - name: Install license-checker
      run: npm install -g license-checker

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: 🔍 Check Backend License Compliance
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "🔍 Checking backend license compliance with cargo-deny..."
        cargo deny check licenses
        echo "✅ Backend license compliance check passed"
      working-directory: backend

    - name: 🔍 Check Frontend License Compliance
      run: |
        echo "🔍 Checking frontend license compliance with license-checker..."
        license-checker --config .license-checker.json
        echo "✅ Frontend license compliance check passed"
      working-directory: frontend

    - name: 📋 Generate License Report
      run: |
        echo "📋 Generating comprehensive license report..."

        # Generate backend license report
        echo "Generating backend license report..."
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo deny check licenses --format json > backend-licenses.json || true
        echo "Backend license check completed"

        # Generate frontend license report
        echo "Generating frontend license report..."
        license-checker --config .license-checker.json --json > frontend-licenses.json || true
        echo "Frontend license check completed"

        echo "✅ License compliance check completed successfully"

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance-reports-${{ github.sha }}
        path: |
          backend-licenses.json
          frontend-licenses.json

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend-smoke-tests]

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Build backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo build --verbose
      working-directory: backend

    - name: Run backend integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture integration_tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

  frontend-integration-tests:
    name: Frontend Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend integration tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false
      env:
        REACT_APP_GRAPHQL_ENDPOINT: http://localhost:8080/graphql

  e2e-core-tests:
    name: E2E Core Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [backend-smoke-tests, frontend-integration-tests, backend-integration-tests]

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install shared tools
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Wait for PostgreSQL
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done

    - name: Run database migrations
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Start backend service
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        ./target/release/econ-graph-backend &
        echo $! > backend.pid

        # Wait for backend to be ready
        for i in {1..60}; do
          if curl -f http://localhost:8080/health 2>/dev/null; then
            echo "Backend is ready!"
            break
          fi
          echo "Waiting for backend... ($i/60)"
          sleep 2
        done
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      working-directory: frontend

    - name: Start frontend service
      run: |
        npm run build
        npx serve -s build -l 3000 &
        echo $! > frontend.pid

        # Wait for frontend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done
      working-directory: frontend

    - name: Run E2E Core Tests
      run: npm run test:e2e:core
      working-directory: frontend

    - name: Stop services
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
        fi
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) || true
        fi

  e2e-comprehensive-tests:
    name: E2E Comprehensive Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend-smoke-tests, frontend-integration-tests, backend-integration-tests]

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "🔍 Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Additional verification with a simple query
        echo "🔍 Verifying PostgreSQL is fully functional..."
        PGPASSWORD=password psql -h localhost -p 5432 -U postgres -d econ_graph_test -c "SELECT 1;" || {
          echo "❌ PostgreSQL health check failed"
          exit 1
        }
        echo "✅ PostgreSQL is fully functional!"

    - name: Build and start backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo build --release --bin econ-graph-backend
        echo "🚀 Starting backend server..."
        # Use pre-built binary directly to avoid recompiling dependencies
        ./target/release/econ-graph-backend &
        BACKEND_PID=$!
        echo "Backend PID: $BACKEND_PID"

        # Wait for backend to be ready
        echo "🔍 Waiting for backend to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:9876/health > /dev/null 2>&1; then
            echo "✅ Backend is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: Backend not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Verify backend is responding
        curl -f http://localhost:9876/health || {
          echo "❌ Backend health check failed"
          exit 1
        }
        echo "✅ Backend is fully functional!"
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Install dev-server dependencies
      working-directory: frontend/dev-server
      run: npm ci

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    - name: Run end-to-end tests
      working-directory: frontend
      run: npm run test:e2e

  mobile-e2e-tests:
    name: Mobile End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [backend-integration-tests]

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-mobile-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-mobile-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "🔍 Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Additional verification with a simple query
        echo "🔍 Verifying PostgreSQL is fully functional..."
        PGPASSWORD=password psql -h localhost -p 5432 -U postgres -d econ_graph_test -c "SELECT 1;" || {
          echo "❌ PostgreSQL health check failed"
          exit 1
        }
        echo "✅ PostgreSQL is fully functional!"

    - name: Build and start backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo build --release --bin econ-graph-backend
        echo "🚀 Starting backend server..."
        # Use pre-built binary directly to avoid recompiling dependencies
        ./target/release/econ-graph-backend &
        BACKEND_PID=$!
        echo "Backend PID: $BACKEND_PID"

        # Wait for backend to be ready
        echo "🔍 Waiting for backend to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:9876/health > /dev/null 2>&1; then
            echo "✅ Backend is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: Backend not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Verify backend is responding
        curl -f http://localhost:9876/health || {
          echo "❌ Backend health check failed"
          exit 1
        }
        echo "✅ Backend is fully functional!"
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Install dev-server dependencies
      working-directory: frontend/dev-server
      run: npm ci

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    - name: Install additional mobile browser dependencies
      working-directory: frontend
      run: |
        npx playwright install chromium webkit
        npx playwright install-deps

    - name: Run mobile end-to-end tests
      working-directory: frontend
      run: npm run test:e2e:mobile

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [backend-smoke-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: econ-graph-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: econ-graph-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker images
      run: |
        echo "Testing backend Docker image..."
        docker run --rm econ-graph-backend:test --version || echo "Backend image test completed"

        echo "Testing frontend Docker image..."
        docker run --rm econ-graph-frontend:test --version || echo "Frontend image test completed"
# Updated Wed Sep 17 08:11:38 PDT 2025

# Workflow cache refresh: 2025-09-17 08:25:07 PDT
