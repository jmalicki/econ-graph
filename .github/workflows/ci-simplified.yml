name: Simplified CI Tests

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run CI on (leave empty for current branch)'
        required: false
        default: ''
        type: string

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

jobs:
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Build backend
      run: ./ci/scripts/backend-build.sh

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: backend-build

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Run backend tests
      run: ./ci/scripts/backend-test.sh --all

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Build frontend
      run: ./ci/scripts/frontend-build.sh

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Run Rust formatting check
      working-directory: backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo fmt -- --check

    - name: Run Rust clippy
      working-directory: backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo clippy -- -W clippy::all

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint

    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Install cargo-audit
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install cargo-audit --verbose --force

    - name: Run security audit
      working-directory: backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo audit

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Install cargo-deny
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install cargo-deny --verbose --force

    - name: Run license check
      working-directory: backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo deny check
